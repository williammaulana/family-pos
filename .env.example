# ===========================================
# POS INVENTORY SYSTEM ENVIRONMENT VARIABLES
# ===========================================

# Copy this file to .env.local and fill in your actual values

# ===========================================
# DATABASE CONFIGURATION (MySQL)
# ===========================================

# Database host (localhost for local development, or your MySQL server IP)
DB_HOST=localhost

# Database username (root for local development, or your MySQL user)
DB_USER=root

# Database password (set during MySQL installation)
DB_PASSWORD=your_mysql_password_here

# Database name (the database you created for the POS system)
DB_NAME=family_store_pos

# Database port (default MySQL port is 3306)
DB_PORT=3306

# ===========================================
# MIGRATION SECURITY & LOCKING
# ===========================================

# Enable the /api/migrate endpoint in production (default: disabled)
# Set to true only when you intend to run migrations via HTTP
ENABLE_MIGRATION_ENDPOINT=false

# Token required in production when calling /api/migrate
# Send as header: x-migration-token: <token> (or Authorization: Bearer <token>)
MIGRATION_TOKEN=change_me_strong_random

# MySQL advisory lock settings used by migration runner
MIGRATION_LOCK_NAME=pos_migration_lock
MIGRATION_LOCK_TIMEOUT_SECONDS=60

# ===========================================
# SUPABASE CONFIGURATION
# ===========================================

# Supabase project URL (get this from your Supabase project settings)
# For browser/client code, you MUST use NEXT_PUBLIC_ variants
NEXT_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co

# Supabase anonymous/public key (get this from your Supabase project settings)
# For browser/client code, you MUST use NEXT_PUBLIC_ variants
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Optional server-only fallbacks (useful for server actions/routes)
# SUPABASE_URL=https://your-project-id.supabase.co
# SUPABASE_ANON_KEY=your_supabase_anon_key_here

# ===========================================
# PAYMENT GATEWAY CONFIGURATION (Xendit)
# ===========================================

# Xendit secret key (get this from your Xendit dashboard)
# For development: use your development secret key
# For production: use your production secret key
XENDIT_SECRET_KEY=xnd_development_your_secret_key_here

# ===========================================
# APPLICATION CONFIGURATION
# ===========================================

# Next.js application URL (for webhooks and redirects)
NEXT_PUBLIC_APP_URL=http://localhost:3000

# Application environment (development, staging, production)
NODE_ENV=development

# ===========================================
# OPTIONAL CONFIGURATIONS
# ===========================================

# JWT Secret for additional authentication (if needed)
# JWT_SECRET=your_jwt_secret_here

# Email service configuration (if you plan to add email features)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your_email@gmail.com
# SMTP_PASS=your_app_password_here

# File upload configuration (if using cloud storage)
# CLOUDINARY_CLOUD_NAME=your_cloud_name
# CLOUDINARY_API_KEY=your_api_key
# CLOUDINARY_API_SECRET=your_api_secret

# ===========================================
# DEVELOPMENT NOTES
# ===========================================
#
# 1. For local MySQL setup:
#    - Install MySQL locally or use Docker
#    - Create database: CREATE DATABASE family_store_pos;
#    - Create user if needed: CREATE USER 'pos_user'@'localhost' IDENTIFIED BY 'password';
#    - Grant permissions: GRANT ALL ON family_store_pos.* TO 'pos_user'@'localhost';
#
# 2. For Supabase:
#    - Create a free account at https://supabase.com
#    - Create a new project
#    - Copy the URL and anon key from Project Settings > API
#
# 3. For Xendit:
#    - Create an account at https://xendit.co
#    - Get your secret key from Dashboard > Settings > API Keys
#    - Use development keys for testing, production keys for live payments
#
# 4. After filling in the values:
#    - Copy this file to .env.local
#    - Run the application: npm run dev
#    - Test database connection: http://localhost:3000/api/test-connection
#    - Run migrations if needed: http://localhost:3000/api/migrate
